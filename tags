!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	config/defaults.vim	/^nnoremap $ g\$$/;"	m
,/	config/defaults.vim	/^nmap <silent> ,\/ :nohlsearch<CR>$/;"	m
0	config/defaults.vim	/^nnoremap 0 g0$/;"	m
;	config/defaults.vim	/^nnoremap ; :$/;"	m
<C-h>	config/defaults.vim	/^map <C-h> <C-w>h$/;"	m
<C-j>	config/defaults.vim	/^map <C-j> <C-w>j$/;"	m
<C-k>	config/defaults.vim	/^map <C-k> <C-w>k$/;"	m
<C-k>	config/plugins.vim	/^imap <C-k>     <Plug>(neosnippet_expand_or_jump)$/;"	m
<C-l>	config/defaults.vim	/^map <C-l> <C-w>l$/;"	m
<F8>	config/defaults.vim	/^nmap <F8> :TagbarToggle<CR>$/;"	m
<Leader>f	config/plugins.vim	/^nnoremap <Leader>f :CtrlPMRUFiles<CR>$/;"	m
<Leader>o	config/plugins.vim	/^nnoremap <Leader>o :CtrlP<CR>$/;"	m
<Leader>p	config/plugins.vim	/^nnoremap <Leader>p :Files<CR>$/;"	m
<Leader>u	config/plugins.vim	/^nnoremap <Leader>u :CtrlPBuffer<CR>$/;"	m
<TAB>	config/plugins.vim	/^imap <expr><TAB>$/;"	m
<down>	config/defaults.vim	/^map <down> <nop>$/;"	m
<leader>1	config/plugins.vim	/^nmap <leader>1 <Plug>AirlineSelectTab1$/;"	m
<leader>2	config/plugins.vim	/^nmap <leader>2 <Plug>AirlineSelectTab2$/;"	m
<leader>3	config/plugins.vim	/^nmap <leader>3 <Plug>AirlineSelectTab3$/;"	m
<leader>4	config/plugins.vim	/^nmap <leader>4 <Plug>AirlineSelectTab4$/;"	m
<leader>5	config/plugins.vim	/^nmap <leader>5 <Plug>AirlineSelectTab5$/;"	m
<leader>6	config/plugins.vim	/^nmap <leader>6 <Plug>AirlineSelectTab6$/;"	m
<leader>7	config/plugins.vim	/^nmap <leader>7 <Plug>AirlineSelectTab7$/;"	m
<leader>8	config/plugins.vim	/^nmap <leader>8 <Plug>AirlineSelectTab8$/;"	m
<leader>9	config/plugins.vim	/^nmap <leader>9 <Plug>AirlineSelectTab9$/;"	m
<leader><tab>	config/plugins.vim	/^nmap <leader><tab> <plug>(fzf-maps-n)$/;"	m
<leader><tab>	config/plugins.vim	/^omap <leader><tab> <plug>(fzf-maps-o)$/;"	m
<leader>es	config/plugins.vim	/^nnoremap <silent> <leader>es :Esformatter<CR>$/;"	m
<leader>es	config/plugins.vim	/^vnoremap <silent> <leader>es :EsformatterVisual<CR>$/;"	m
<leader>ev	config/defaults.vim	/^nnoremap <leader>ev :vsplit $MYVIMRC<cr>$/;"	m
<leader>sv	config/defaults.vim	/^nnoremap <leader>sv :source $MYVIMRC<cr>$/;"	m
<left>	config/defaults.vim	/^map <left> <nop>$/;"	m
<right>	config/defaults.vim	/^map <right> <nop>$/;"	m
<up>	config/defaults.vim	/^map <up> <nop>$/;"	m
Find	config/plugins.vim	/^command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git\/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)$/;"	c
['<C-j>'] 	init.lua	/^        ['<C-j>'] = cmp.mapping(function(fallback)$/;"	f
['<C-k>'] 	init.lua	/^        ['<C-k>'] = cmp.mapping(function(fallback)$/;"	f
['[M'] 	init.lua	/^                ['[M'] = '@function.outer',$/;"	f
['[m'] 	init.lua	/^                ['[m'] = '@function.outer',$/;"	f
[']M'] 	init.lua	/^                [']M'] = '@function.outer',$/;"	f
[']m'] 	init.lua	/^                [']m'] = '@function.outer',$/;"	f
['af'] 	init.lua	/^                ['af'] = '@function.outer',$/;"	f
['if'] 	init.lua	/^                ['if'] = '@function.inner',$/;"	f
[h	config/plugins.vim	/^nmap [h <Plug>GitGutterPrevHunk$/;"	m
]h	config/plugins.vim	/^nmap ]h <Plug>GitGutterNextHunk$/;"	m
append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	autoload/plug.vim	/^function! s:bar()$/;"	f
batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
callback 	init.lua	/^    callback = function()$/;"	f
callback 	lua/vim-go.lua	/^    callback = function(args)$/;"	f
check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
clone	plugins.sh	/^function clone() {$/;"	f
close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
diff	autoload/plug.vim	/^function! s:diff()$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
expand 	init.lua	/^        expand = function(args)$/;"	f
extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
g$	config/defaults.vim	/^nnoremap g$ \$$/;"	m
g0	config/defaults.vim	/^nnoremap g0 0$/;"	m
g:EasyMotion_leader_key	config/defaults.vim	/^let g:EasyMotion_leader_key = '<Leader>m'$/;"	v
g:UltiSnipsExpandTrigger	config/plugins.vim	/^let g:UltiSnipsExpandTrigger="<c-e>"$/;"	v
g:UltiSnipsJumpForwardTrigger	config/plugins.vim	/^let g:UltiSnipsJumpForwardTrigger="<c-e>"$/;"	v
g:airline#extensions#tabline#buffer_idx_mode	config/plugins.vim	/^let g:airline#extensions#tabline#buffer_idx_mode = 1$/;"	v
g:airline#extensions#tabline#buffer_nr_show	config/plugins.vim	/^let g:airline#extensions#tabline#buffer_nr_show = 1$/;"	v
g:airline#extensions#tabline#enabled	config/plugins.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#show_buffers	config/plugins.vim	/^let g:airline#extensions#tabline#show_buffers = 1$/;"	v
g:airline_powerline_fonts	config/plugins.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_theme	config/plugins.vim	/^let g:airline_theme="hybrid"$/;"	v
g:deoplete#enable_at_startup	config/plugins.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#sources#clang#clang_header	config/plugins.vim	/^let g:deoplete#sources#clang#clang_header = "\/Library\/Developer\/CommandLineTools\/usr\/lib\/clang"$/;"	v
g:deoplete#sources#clang#flags	config/plugins.vim	/^let g:deoplete#sources#clang#flags = [$/;"	v
g:deoplete#sources#clang#libclang_path	config/plugins.vim	/^let g:deoplete#sources#clang#libclang_path = "\/Library\/Developer\/CommandLineTools\/usr\/lib\/libclang.dylib"$/;"	v
g:echodoc#enable_at_startup	config/plugins.vim	/^let g:echodoc#enable_at_startup = 1$/;"	v
g:enable_bold_font	config/defaults.vim	/^let g:enable_bold_font = 1$/;"	v
g:go_asmfmt_autosave	config/plugins.vim	/^let g:go_asmfmt_autosave = 0$/;"	v
g:go_auto_type_info	config/plugins.vim	/^let g:go_auto_type_info = 1$/;"	v
g:go_autodetect_gopath	config/plugins.vim	/^let g:go_autodetect_gopath = 0$/;"	v
g:go_fmt_command	config/plugins.vim	/^let g:go_fmt_command = "goimports"$/;"	v
g:go_fmt_experimental	config/plugins.vim	/^let g:go_fmt_experimental = 1$/;"	v
g:go_highlight_build_constraints	config/plugins.vim	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_functions	config/plugins.vim	/^let g:go_highlight_functions = 1$/;"	v
g:go_highlight_interfaces	config/plugins.vim	/^let g:go_highlight_interfaces = 1$/;"	v
g:go_highlight_methods	config/plugins.vim	/^let g:go_highlight_methods = 1$/;"	v
g:go_highlight_operators	config/plugins.vim	/^let g:go_highlight_operators = 1$/;"	v
g:go_highlight_structs	config/plugins.vim	/^let g:go_highlight_structs = 1$/;"	v
g:go_list_type	config/plugins.vim	/^let g:go_list_type = "locationlist"$/;"	v
g:go_metalinter_enabled	config/plugins.vim	/^let g:go_metalinter_enabled = [$/;"	v
g:go_rename_command	config/plugins.vim	/^let g:go_rename_command = 'gopls'$/;"	v
g:gruvbox_contrast_dark	config/defaults.vim	/^let g:gruvbox_contrast_dark='medium'$/;"	v
g:gruvbox_invert_selection	config/defaults.vim	/^let g:gruvbox_invert_selection=0$/;"	v
g:gruvbox_sign_column	config/defaults.vim	/^let g:gruvbox_sign_column='dark0'$/;"	v
g:hybrid_transparent_background	config/defaults.vim	/^let g:hybrid_transparent_background = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:syntastic_auto_loc_list	config/plugins.vim	/^let g:syntastic_auto_loc_list = 0$/;"	v
g:syntastic_cpp_checkers	config/plugins.vim	/^let g:syntastic_cpp_checkers = ['gcc']$/;"	v
g:syntastic_cpp_compiler_options	config/plugins.vim	/^let g:syntastic_cpp_compiler_options = '-std=c++14'$/;"	v
g:syntastic_html_validator_parser	config/plugins.vim	/^let g:syntastic_html_validator_parser = 'html5'$/;"	v
g:terminal_color_0	config/defaults.vim	/^let g:terminal_color_0="#282828"$/;"	v
g:terminal_color_1	config/defaults.vim	/^let g:terminal_color_1="#cc241d"$/;"	v
g:terminal_color_10	config/defaults.vim	/^let g:terminal_color_10="#b8bb26"$/;"	v
g:terminal_color_11	config/defaults.vim	/^let g:terminal_color_11="#fabd2f"$/;"	v
g:terminal_color_12	config/defaults.vim	/^let g:terminal_color_12="#83a598"$/;"	v
g:terminal_color_13	config/defaults.vim	/^let g:terminal_color_13="#d3869b"$/;"	v
g:terminal_color_14	config/defaults.vim	/^let g:terminal_color_14="#8ec07c"$/;"	v
g:terminal_color_15	config/defaults.vim	/^let g:terminal_color_15="#ebdbb2"$/;"	v
g:terminal_color_2	config/defaults.vim	/^let g:terminal_color_2="#98971a"$/;"	v
g:terminal_color_3	config/defaults.vim	/^let g:terminal_color_3="#d79921"$/;"	v
g:terminal_color_4	config/defaults.vim	/^let g:terminal_color_4="#458588"$/;"	v
g:terminal_color_5	config/defaults.vim	/^let g:terminal_color_5="#b16286"$/;"	v
g:terminal_color_6	config/defaults.vim	/^let g:terminal_color_6="#689d6a"$/;"	v
g:terminal_color_7	config/defaults.vim	/^let g:terminal_color_7="#a89984"$/;"	v
g:terminal_color_8	config/defaults.vim	/^let g:terminal_color_8="#928374"$/;"	v
g:terminal_color_9	config/defaults.vim	/^let g:terminal_color_9="#fb4934"$/;"	v
g:tern_show_argument_hints	config/plugins.vim	/^  let g:tern_show_argument_hints = 'on_hold'$/;"	v
g:tern_show_signature_in_pum	config/plugins.vim	/^  let g:tern_show_signature_in_pum = 1$/;"	v
git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
gj	config/defaults.vim	/^nnoremap gj j$/;"	m
gk	config/defaults.vim	/^nnoremap gk k$/;"	m
glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
if vim.api.nvim_call_function('has', {'nvim-0.5'}) ~	plugin/packer_compiled.lua	/^if vim.api.nvim_call_function('has', {'nvim-0.5'}) ~= 1 then$/;"	f
infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
j	config/defaults.vim	/^nnoremap j gj$/;"	m
jk	config/defaults.vim	/^inoremap jk <esc>$/;"	m
job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
k	config/defaults.vim	/^nnoremap k gk$/;"	m
last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
local nmap 	init.lua	/^    local nmap = function(keys, func, desc)$/;"	f
local nmap 	lua/vim-go.lua	/^        local nmap = function(keys, func, desc)$/;"	f
local no_errors, error_msg 	plugin/packer_compiled.lua	/^local no_errors, error_msg = pcall(function()$/;"	f
local on_attach 	init.lua	/^local on_attach = function(_, bufnr)$/;"	f
lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
mapleader	config/defaults.vim	/^let mapleader = "\\<SPACE>"$/;"	v
maplocalleader	config/defaults.vim	/^let maplocalleader = ","$/;"	v
names	autoload/plug.vim	/^function! s:names(...)$/;"	f
new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
omnifuncs	config/plugins.vim	/^augroup omnifuncs$/;"	a
parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
retry	autoload/plug.vim	/^function! s:retry()$/;"	f
revert	autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
run	plugins.sh	/^    function run {$/;"	f
run 	init.lua	/^        run = function()$/;"	f
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
save_profiles	plugin/packer_compiled.lua	/^local function save_profiles(threshold)$/;"	f
section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
status	autoload/plug.vim	/^function! s:status()$/;"	f
status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
tick	autoload/plug.vim	/^function! s:tick()$/;"	f
time 	plugin/packer_compiled.lua	/^  time = function(chunk, start) end$/;"	f
time 	plugin/packer_compiled.lua	/^  time = function(chunk, start)$/;"	f
to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
try_loadstring	plugin/packer_compiled.lua	/^local function try_loadstring(s, component, name)$/;"	f
update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vim.g.enable_bold_font 	lua/options.lua	/^vim.g.enable_bold_font = true -- Uses bold font for functions and the like$/;"	f
vim.g.go_highlight_function_calls 	lua/vim-go.lua	/^vim.g.go_highlight_function_calls = true$/;"	f
vim.g.go_highlight_functions 	lua/vim-go.lua	/^vim.g.go_highlight_functions = true$/;"	f
w!!	config/defaults.vim	/^cmap w!! w !sudo tee % >\/dev\/null$/;"	m
warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
